name: Go CI Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: "1.23"
  COVERAGE_THRESHOLD: 80
  GOLANGCI_LINT_VERSION: v2.1.6

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}
          golangci-lint --version

      - name: Lint cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('.golangci.yml', 'go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-
      
      - name: Run golangci-lint
        run: golangci-lint run ./... --timeout=5m

  verify:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        task: [build, test, coverage]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Build
        if: matrix.task == 'build'
        run: go build -v ./...
      
      - name: Test with race detector
        if: matrix.task == 'test'
        run: go test -v -race ./...
      
      - name: Coverage
        if: matrix.task == 'coverage'
        run: |
          mkdir -p coverage
          go test -coverprofile=coverage/coverage.out $(go list ./... | grep -v "/examples\|/cmd")
          
          COVERAGE=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Code coverage: $COVERAGE%"
          
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "FAILURE: Code coverage is below the minimum threshold of ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi
          
      - name: Upload coverage
        if: matrix.task == 'coverage'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: false 
          override_commit: ${{ github.sha }}

